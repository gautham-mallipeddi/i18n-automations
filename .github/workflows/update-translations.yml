name: Auto Translate Locales

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
      - release/development
      - release/qa
      - release/production
    paths:
      - 'locales/en.json'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-branch-conditions:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check if workflow should run
        id: check
        run: |
          # Get source and target branches
          SOURCE_BRANCH="${{ github.head_ref }}"
          TARGET_BRANCH="${{ github.base_ref }}"
          
          # Define release branches
          RELEASE_BRANCHES=("main" "release/development" "release/qa" "release/production")
          
          # Check if source branch is one of the release branches
          SOURCE_IS_RELEASE=false
          for branch in "${RELEASE_BRANCHES[@]}"; do
            if [[ "$SOURCE_BRANCH" == "$branch" ]]; then
              SOURCE_IS_RELEASE=true
              break
            fi
          done
          
          # Check if target branch is one of the release branches
          TARGET_IS_RELEASE=false
          for branch in "${RELEASE_BRANCHES[@]}"; do
            if [[ "$TARGET_BRANCH" == "$branch" ]]; then
              TARGET_IS_RELEASE=true
              break
            fi
          done
          
          # Skip if both source and target are release branches (release PRs)
          if [[ "$SOURCE_IS_RELEASE" == true && "$TARGET_IS_RELEASE" == true ]]; then
            echo "Skipping workflow: Release branch to release branch PR detected"
            echo "should-run=false" >> $GITHUB_OUTPUT
          else
            echo "Running workflow: Feature branch to release branch PR detected"
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi

  auto-translate:
    needs: check-branch-conditions
    if: needs.check-branch-conditions.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    
    services:
      libretranslate:
        image: libretranslate/libretranslate:latest
        ports:
          - 5000:5000
        env:
          LT_LOAD_ONLY: en,de,es,ja,pt
          LT_THREADS: 2
        options: >-
          --health-cmd "curl -f http://localhost:5000/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 120s
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install axios

      - name: Wait for LibreTranslate to be ready
        run: |
          echo "Waiting for LibreTranslate to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:5000/health; do echo "Still waiting..."; sleep 10; done'
          echo "LibreTranslate is ready!"
          
          # Test a simple translation to make sure it's working
          echo "Testing translation service..."
          curl -X POST "http://localhost:5000/translate" \
            -H "Content-Type: application/json" \
            -d '{"q": "Hello", "source": "en", "target": "es"}' \
            --max-time 30 || echo "Translation test failed, but continuing..."

      - name: Run translation using github-script
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const axios = require('axios');

            // Language mappings
            const LANGUAGES = {
              'de.json': 'de',
              'es.json': 'es', 
              'ja.json': 'ja',
              'pt.json': 'pt'
            };

            // Use local LibreTranslate instance
            const TRANSLATE_API = 'http://localhost:5000/translate';

            async function translateText(text, targetLang, retries = 3) {
              for (let i = 0; i < retries; i++) {
                try {
                  console.log(`Translating "${text}" to ${targetLang} (attempt ${i + 1})`);
                  const response = await axios.post(TRANSLATE_API, {
                    q: text,
                    source: 'en',
                    target: targetLang,
                    format: 'text'
                  }, {
                    timeout: 30000,
                    headers: { 'Content-Type': 'application/json' }
                  });
                  
                  if (response.data && response.data.translatedText) {
                    console.log(`Translation successful: "${response.data.translatedText}"`);
                    return response.data.translatedText;
                  } else {
                    console.log(`Invalid response format:`, response.data);
                  }
                } catch (error) {
                  console.log(`Translation attempt ${i + 1} failed for "${text}":`, error.message);
                  if (error.response) {
                    console.log(`Response status: ${error.response.status}`);
                    console.log(`Response data:`, error.response.data);
                  }
                  if (i === retries - 1) {
                    console.log(`All translation attempts failed for "${text}", keeping original text`);
                    return text;
                  }
                  // Exponential backoff
                  await new Promise(resolve => setTimeout(resolve, 2000 * (i + 1)));
                }
              }
              return text;
            }

            async function translateObject(obj, targetLang, path = '') {
              const result = {};
              for (const [key, value] of Object.entries(obj)) {
                if (typeof value === 'string') {
                  console.log(`Translating: ${path ? path + '.' : ''}${key} = "${value}"`);
                  result[key] = await translateText(value, targetLang);
                  // Rate limiting between translations
                  await new Promise(resolve => setTimeout(resolve, 500));
                } else if (typeof value === 'object' && value !== null) {
                  result[key] = await translateObject(value, targetLang, path ? `${path}.${key}` : key);
                } else {
                  result[key] = value;
                }
              }
              return result;
            }

            function deepMerge(target, source) {
              const result = { ...target };
              for (const key in source) {
                if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {
                  result[key] = deepMerge(result[key] || {}, source[key]);
                } else {
                  result[key] = source[key];
                }
              }
              return result;
            }

            function removeDeletedKeys(target, source) {
              const result = {};
              for (const key in target) {
                if (key in source) {
                  if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {
                    result[key] = removeDeletedKeys(target[key], source[key]);
                  } else {
                    result[key] = target[key];
                  }
                }
              }
              return result;
            }

            // Get the changed keys from the current PR
            async function getChangedKeys() {
              try {
                const { data: files } = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                });

                const enFile = files.find(file => file.filename === 'locales/en.json');
                if (!enFile || enFile.status === 'removed') {
                  return new Set();
                }

                const changedKeys = new Set();
                
                // Parse the patch to find changed keys
                const patch = enFile.patch || '';
                const addedLines = patch.split('\n').filter(line => line.startsWith('+') && !line.startsWith('+++'));
                
                for (const line of addedLines) {
                  // Remove the '+' prefix and trim
                  const content = line.substring(1).trim();
                  // Match JSON key-value pairs: "key": "value"
                  const keyMatch = content.match(/^"([^"]+)":\s*"[^"]*"[,]?$/);
                  if (keyMatch) {
                    changedKeys.add(keyMatch[1]);
                  }
                }

                console.log('Changed keys detected:', Array.from(changedKeys));
                return changedKeys;
              } catch (error) {
                console.log('Could not detect changed keys, will translate all new/missing keys:', error.message);
                return new Set();
              }
            }

            // Modified function to find keys that need translation
            function findKeysToTranslate(enObj, existingObj, changedKeys, keyPath = '') {
              const result = {};
              for (const [key, value] of Object.entries(enObj)) {
                const fullKey = keyPath ? `${keyPath}.${key}` : key;
                
                if (typeof value === 'string') {
                  // Translate if: key is new, key was changed in PR, or existing translation is missing/empty
                  const shouldTranslate = 
                    !existingObj || 
                    !(key in existingObj) || 
                    typeof existingObj[key] !== 'string' ||
                    existingObj[key] === '' ||
                    existingObj[key] === value || // If target has same English value
                    changedKeys.has(key) ||
                    changedKeys.has(fullKey);
                  
                  if (shouldTranslate) {
                    result[key] = value;
                  }
                } else if (typeof value === 'object' && value !== null) {
                  if (!existingObj || !(key in existingObj)) {
                    // Entire nested object is new
                    result[key] = value;
                  } else {
                    // Recursively check nested object
                    const nested = findKeysToTranslate(value, existingObj[key], changedKeys, fullKey);
                    if (Object.keys(nested).length > 0) {
                      result[key] = nested;
                    }
                  }
                }
              }
              return result;
            }

            // Main logic
            const enPath = path.join('locales', 'en.json');
            if (!fs.existsSync(enPath)) {
              throw new Error('English locale file not found!');
            }
            const enContent = JSON.parse(fs.readFileSync(enPath, 'utf8'));
            
            // Get changed keys from the PR
            const changedKeys = await getChangedKeys();

            for (const [filename, langCode] of Object.entries(LANGUAGES)) {
              console.log(`\nProcessing ${filename} (${langCode})...`);
              
              const targetPath = path.join('locales', filename);
              let existingContent = {};
              if (fs.existsSync(targetPath)) {
                existingContent = JSON.parse(fs.readFileSync(targetPath, 'utf8'));
              }
              
              // Remove keys that no longer exist in English
              const cleanedContent = removeDeletedKeys(existingContent, enContent);
              
              // Find keys that need translation
              const keysToTranslate = findKeysToTranslate(enContent, cleanedContent, changedKeys);
              
              let finalContent;
              if (Object.keys(keysToTranslate).length > 0) {
                console.log(`Found ${Object.keys(keysToTranslate).length} keys to translate for ${langCode}`);
                const translatedKeys = await translateObject(keysToTranslate, langCode);
                finalContent = deepMerge(cleanedContent, translatedKeys);
              } else {
                console.log(`No new keys to translate for ${langCode}`);
                finalContent = cleanedContent;
              }
              
              fs.writeFileSync(targetPath, JSON.stringify(finalContent, null, 2) + '\n');
            }

      - name: Check for changes
        id: changes
        run: |
          git add locales/
          if git diff --staged --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No translation changes detected"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Translation changes detected"
          fi

      - name: Commit changes
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "chore: update translations [skip ci]"

      - name: Push changes
        if: steps.changes.outputs.has-changes == 'true'
        run: git push origin HEAD:${{ github.event.pull_request.head.ref }}

      - name: Comment on PR
        if: steps.changes.outputs.has-changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🌐 **Auto-translation completed!**\n\nThe locale files have been automatically updated based on changes to `en.json`. Please review the changes and ensure the translations are accurate.'
            });
